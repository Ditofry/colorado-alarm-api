var search_data = {"index":{"searchIndex":["applicationcontroller","applicationhelper","city","forecast","forecastscontroller","address()","address_changed()","getrecords()","hit()","index()","retrieve_forecast()","readme"],"longSearchIndex":["applicationcontroller","applicationhelper","city","forecast","forecastscontroller","city#address()","city#address_changed()","forecast#getrecords()","forecast#hit()","forecastscontroller#index()","city#retrieve_forecast()",""],"info":[["ApplicationController","","ApplicationController.html","",""],["ApplicationHelper","","ApplicationHelper.html","",""],["City","","City.html","","<p>Primary class for identifying user location and for determining which\nforecast to watch\n"],["Forecast","","Forecast.html","","<p>Atomic Forecast unit.  Attached to City model and provides temperature and\nprecipitation information. …\n"],["ForecastsController","","ForecastsController.html","",""],["address","City","City.html#method-i-address","()","<p>This method forces the Geocode params to be simple to normalize lat/lon\nfetching\n"],["address_changed","City","City.html#method-i-address_changed","()","<p>This method validates that an address has changed during the active model\nlifecycle so that we only query …\n"],["getRecords","Forecast","Forecast.html#method-i-getRecords","(limit, types)","<p>Grab forecast records\n"],["hit","Forecast","Forecast.html#method-i-hit","()","<p>Ping API for successful connection\n"],["index","ForecastsController","ForecastsController.html#method-i-index","()",""],["retrieve_forecast","City","City.html#method-i-retrieve_forecast","()","<p>Called on create and in background tasks to query Darksky API for weather\ndata.  If query is succesfull …\n"],["README","","README_rdoc.html","","<p>README\n<p>This README would normally document whatever steps are necessary to get the\napplication up and …\n"]]}}